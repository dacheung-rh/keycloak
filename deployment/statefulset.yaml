kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: keycloak
  namespace: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: keycloak
        app.kubernetes.io/instance: keycloak
    spec:
      volumes:
        - name: keycloak-tls-certificates
          secret:
            secretName: keycloak-tls-secret
            defaultMode: 420
            optional: false
      containers:
        - resources:
            limits:
              memory: 2Gi
            requests:
              memory: 1700Mi
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8443
              scheme: HTTPS
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: keycloak
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8443
              scheme: HTTPS
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            - name: KC_HOSTNAME
              value: keycloak.apps.cluster-6llmr.6llmr.sandbox2372.opentlc.com
            - name: KC_HOSTNAME_ADMIN
              value: admin-rhbk.apps.cluster-6llmr.6llmr.sandbox2372.opentlc.com
            - name: KC_HOSTNAME_STRICT
              value: 'true'
            - name: KC_HTTP_PORT
              value: '8080'
            - name: KC_HTTPS_PORT
              value: '8443'
            - name: KC_HTTPS_CERTIFICATE_FILE
              value: /mnt/certificates/tls.crt
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
              value: /mnt/certificates/tls.key
            - name: KC_DB
              value: postgres
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: keycloak-db-secret
                  key: username
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-db-secret
                  key: password
            - name: KC_DB_URL_DATABASE
              value: postgresdb
            - name: KC_DB_URL_HOST
              value: postgres-db.keycloak.svc.cluster.local
            - name: KC_HEALTH_ENABLED
              value: 'true'
            - name: KC_CACHE
              value: ispn
            - name: KC_CACHE_STACK
              value: kubernetes
            - name: KC_PROXY
              value: passthrough
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-kc-initial-admin
                  key: username
                  optional: false
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-kc-initial-admin
                  key: password
                  optional: false
            - name: KC_TRUSTSTORE_PATHS
              value: '/var/run/secrets/kubernetes.io/serviceaccount/ca.crt,/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt'
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          imagePullPolicy: Always
          startupProbe:
            httpGet:
              path: /health/started
              port: 8443
              scheme: HTTPS
            timeoutSeconds: 1
            periodSeconds: 1
            successThreshold: 1
            failureThreshold: 600
          volumeMounts:
            - name: keycloak-tls-certificates
              mountPath: /mnt/certificates
          terminationMessagePolicy: File
          image: 'registry.redhat.io/rhbk/keycloak-rhel9:26.0'
          args:
            - '-Djgroups.dns.query=keycloak-discovery.keycloak'
            - '--verbose'
            - start
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  serviceName: ''
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
